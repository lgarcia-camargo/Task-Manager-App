{"ast":null,"code":"var _jsxFileName = \"/Users/leongarcia/Documents/ReactPractice/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false); //Add Task\n\n  const addTask = task => {\n    const id = Math.floor(Math.random() * 10000) + 1;\n    const newTask = {\n      id,\n      ...task\n    };\n    setTasks([...tasks, newTask]);\n  }; // Delete Task\n\n\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Toggle Reminder\n\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 26\n    }, this) : 'No Tasks To Show']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"d8KoGlW5Ebuo4DS6q+70QKI9sx0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/leongarcia/Documents/ReactPractice/react-task-tracker/src/App.js"],"names":["useState","Header","Tasks","AddTask","App","showAddTask","setShowAddTask","addTask","task","id","Math","floor","random","newTask","setTasks","tasks","deleteTask","filter","toggleReminder","map","reminder","length"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;AAOA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,KAAD,CAA9C,CADa,CAKf;;AACA,QAAMO,OAAO,GAAIC,IAAD,IAAU;AACxB,UAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,IAAkC,CAA7C;AACA,UAAMC,OAAO,GAAG;AAACJ,MAAAA,EAAD;AAAK,SAAGD;AAAR,KAAhB;AACAM,IAAAA,QAAQ,CAAC,CAAC,GAAGC,KAAJ,EAAWF,OAAX,CAAD,CAAR;AACD,GAJD,CANe,CAYf;;;AACA,QAAMG,UAAU,GAAIP,EAAD,IAAQ;AACzBK,IAAAA,QAAQ,CAACC,KAAK,CAACE,MAAN,CAAcT,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,GAFD,CAbe,CAiBf;;;AACA,QAAMS,cAAc,GAAIT,EAAD,IAAQ;AAC7BK,IAAAA,QAAQ,CAACC,KAAK,CAACI,GAAN,CAAWX,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAZ,GAC7B,EAAC,GAAGD,IAAJ;AAAUY,MAAAA,QAAQ,EAAC,CAACZ,IAAI,CAACY;AAAzB,KAD6B,GACQZ,IAD5B,CAAD,CAAR;AAED,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,MAAMF,cAAc,CAChC,CAACD,WAD+B,CAAnC;AACkB,MAAA,OAAO,EAAEA;AAD3B;AAAA;AAAA;AAAA;AAAA,YADF,EAGGA,WAAW,iBAAI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAGE;AAAjB;AAAA;AAAA;AAAA;AAAA,YAHlB,EAKGQ,KAAK,CAACM,MAAN,GAAe,CAAf,gBAAoB,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEN,KAAd;AAAqB,MAAA,QAAQ,EAAEC,UAA/B;AAA2C,MAAA,QAAQ,EAAEE;AAArD;AAAA;AAAA;AAAA;AAAA,YAApB,GAEC,kBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaC;;GApCQd,G;;KAAAA,G;AA0CT,eAAeA,GAAf","sourcesContent":["import {useState} from 'react'\nimport Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\n\n\n\n\n\n\nfunction App() {\n  const [showAddTask, setShowAddTask] = useState(false)\n\n\n\n//Add Task\nconst addTask = (task) => {\n  const id = Math.floor(Math.random() * 10000)+1\n  const newTask = {id, ...task}\n  setTasks([...tasks, newTask])\n}\n\n// Delete Task\nconst deleteTask = (id) => {\n  setTasks(tasks.filter((task) => task.id !== id))\n}\n\n//Toggle Reminder\nconst toggleReminder = (id) => {\n  setTasks(tasks.map((task) => task.id === id ? \n  {...task, reminder:!task.reminder} : task))\n}\n\nreturn (\n  <div className='container'>\n    <Header onAdd={() => setShowAddTask\n      (!showAddTask)} showAdd={showAddTask}/>\n    {showAddTask && <AddTask onAdd= {addTask}/>}\n\n    {tasks.length > 0 ? (<Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder}/>) \n    : (\n      'No Tasks To Show'\n    ) }\n  </div>\n\n)\n}\n\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}