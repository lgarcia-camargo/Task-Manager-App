{"ast":null,"code":"var _jsxFileName = \"/Users/leongarcia/Documents/ReactPractice/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport About from './components/About';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []); //passing in empty array for dependencies\n  //fetch single Task\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  }; //fetch the Tasks\n\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  }; //Add Task\n\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]); // const id = Math.floor(Math.random() * 10000)+1\n    // const newTask = {id, ...task}\n    // setTasks([...tasks, newTask])\n  }; // Delete Task\n\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Toggle Reminder\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddTask(!showAddTask),\n        showAdd: showAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 23\n      }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n        tasks: tasks,\n        onDelete: deleteTask,\n        onToggle: toggleReminder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 28\n      }, this) : 'No Tasks To Show', /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        component: About\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/leongarcia/Documents/ReactPractice/react-task-tracker/src/App.js"],"names":["useState","useEffect","BrowserRouter","Router","Route","Header","Footer","Tasks","AddTask","About","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","fetchTask","id","res","fetch","data","json","addTask","task","method","headers","body","JSON","stringify","deleteTask","filter","toggleReminder","taskToToggle","updTask","reminder","map","length"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport About from './components/About'\n\n\n\n\n\n\nfunction App() {\n  const [showAddTask, setShowAddTask] = useState(false)\n  const [tasks, setTasks] = useState([]) \n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks()\n      setTasks(tasksFromServer)\n    }\n      getTasks()\n\n    }, []) //passing in empty array for dependencies\n\n//fetch single Task\nconst fetchTask = async (id) => {\n  const res = await fetch(`http://localhost:5000/tasks/${id}`)\n  const data = await res.json()\n\n  return data\n\n}\n\n\n//fetch the Tasks\nconst fetchTasks = async () => {\n  const res = await fetch('http://localhost:5000/tasks')\n  const data = await res.json()\n\n  return data\n\n}\n\n//Add Task\nconst addTask = async (task) => {\n  const res = await fetch('http://localhost:5000/tasks', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(task)\n  })\n\n  const data = await res.json()\n\n  setTasks([...tasks, data])\n\n  // const id = Math.floor(Math.random() * 10000)+1\n  // const newTask = {id, ...task}\n  // setTasks([...tasks, newTask])\n}\n\n// Delete Task\nconst deleteTask = async (id) => {\n  await fetch(`http://localhost:5000/tasks/${id}`, {\n    method: 'DELETE',\n  })\n\n  setTasks(tasks.filter((task) => task.id !== id))\n}\n\n//Toggle Reminder\nconst toggleReminder = async (id) => {\n  const taskToToggle = await fetchTask(id)\n  const updTask = {...taskToToggle, reminder: !taskToToggle.reminder}\n\n  const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n    method: 'PUT',\n    headers:{\n      'Content-type':'application/json'\n    },\n    body: JSON.stringify(updTask)\n  })\n\n  const data = await res.json()\n\n  setTasks(tasks.map((task) => task.id === id ? \n  {...task, reminder:data.reminder} : task))\n}\n\nreturn (\n  <Router>\n    <div className='container'>\n      <Header onAdd={() => setShowAddTask\n        (!showAddTask)} showAdd={showAddTask}/>\n      {showAddTask && <AddTask onAdd= {addTask}/>}\n\n      {tasks.length > 0 ? (<Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder}/>) \n      : (\n        'No Tasks To Show'\n      ) }\n      <Route path='/about' component={About} />\n      <Footer />\n    </div>\n  </Router>\n)\n}\n\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}